{
  "hash": "c4e34dcf299511550f5d6f5c26288c70",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Python package: shiny-sortable\"\nsubtitle: A Python library to add sortable widgets to Shiny UI.\nfilters:\n  - shinylive\nauthor: \n- name: Dianyi Yang\n  orcid: 0009-0004-4652-3429\ndate: 2024-10-28\nimage: featured.png\ncategories:\n- shiny\n- sortable\n- python\n- shinylive\nlinks:\n  - icon: github\n    name: GitHub\n    url: https://github.com/kv9898/shiny_sortable\n  - icon: python\n    fab: true\n    name: PyPI\n    url: https://pypi.org/project/shiny-sortable/\n\ninclude-after-body:\n  text: |\n    <script type=\"application/javascript\" src=\"js/light-dark.js\"></script>\n---\n\n\nThis is a shinylive example of the usage of the Python package `shiny-sortable`. To install the package, run in CI:\n\n\n```{console}\npip install shiny-sortable\n```\n\n\nMore information can be found in the [GitHub repo](https://github.com/kv9898/shiny_sortable).\n\n```{shinylive-python}\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nfrom shiny import *\nimport shiny_sortable as sortable\nfrom pathlib import Path\n\n@sortable.make(updatable=True)\ndef sortable_list(inputID):\n    list = ui.tags.ol(\n        ui.tags.li(\"Item 1\", **{'data-id': '1'}),\n        ui.tags.li(\"Item 2\", **{'data-id': '2'}),\n        ui.tags.li(\"Item 3\", **{'data-id': '3'}),\n        id=inputID\n    )\n    return list\n\napp_ui = ui.page_fluid(\n    sortable_list(\"list\"),\n    ui.output_text_verbatim(id = \"text\"),\n    ui.input_action_button(\"reset\", \"Reset\"),\n    ui.head_content(ui.include_js(Path(__file__).parent / \"light-dark.js\")), # This is just for the dark mode\n)\n\ndef server(input, output, session):\n    list_order = reactive.value(\"\")\n    @output\n    @render.text\n    def text():\n        return list_order()\n\n    @reactive.effect\n    @reactive.event(input.list)\n    def _():\n        list_order.set(input.list())\n\n    @reactive.effect\n    @reactive.event(input.reset)\n    async def _():\n        await sortable.update(session, \"list\", [\"1\", \"2\", \"3\"])\n\n\napp = App(app_ui, server)\n\n## file: requirements.txt\nshiny-sortable\n\n## file: light-dark.js\nwindow.parent.addEventListener(\"quarto-color-mode\", function(event) {\n    document.documentElement.dataset.bsTheme = event.detail.mode;\n    if (event.detail.mode === \"dark\") {\n        document.documentElement.style.setProperty('--bs-body-bg', \"#16242f\"); // custom dark background color\n    }  else if (event.detail.mode === \"light\") {\n        document.documentElement.style.setProperty('--bs-body-bg', \"#f9fffe\"); // custom light background color\n    }\n})\nwindow.parent.postMessage('ShinyColorQuery', '*'); // request Quarto theme color when Shinyapp is loaded\n```\n\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}