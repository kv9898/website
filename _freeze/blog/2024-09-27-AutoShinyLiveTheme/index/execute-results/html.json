{
  "hash": "9870299c6fbfc3a1514bfcbabf50c81e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ndraft: true\nauthor: Dianyi Yang\ntitle: How to sync Shinylive dark mode with Quarto\nsubtitle: adapted from a Github comment\nfilters:\n  - shinylive\ndate: 2024-09-27\ncategories:\n-  Quarto\n-  Shinylive\nimage: featured.jpg\nnumber-sections: false\nlinks:\n  - icon: github\n    #icon_pack: fab\n    name: Github Thread\n    url: https://github.com/quarto-dev/quarto-cli/discussions/10862\nexecute:\n  echo: false\n  warning: false\n  error: false\n  message: false\ngoogle-scholar: false\ninclude-after-body:\n  text: |\n    <script type=\"application/javascript\" src=\"js/light-dark.js\"></script>\n---\n\nFirst, in the Quarto Website Page, we need to add a JavaScript (script?) to communicate with the ShinyLive app, which is in iframe. The adding is done by:\n\n\n```{yaml}\n#| execute: false\ninclude-after-body:\n  text: |\n    <script type=\"application/javascript\" src=\"js/light-dark.js\"></script>\n```\n\n\nThe actual light-dark.js file is inspired by @mcanouil 's [blog post](https://mickael.canouil.fr/posts/2023-05-30-quarto-light-dark/) and needs to contain:\n\n\n```{js}\n#| execute: false\nconst DarkEvent = new CustomEvent(\"quarto-color-mode\", { detail: { mode: \"dark\" }}); // add new events\nconst LightEvent = new CustomEvent(\"quarto-color-mode\", { detail: { mode: \"light\" }});\n\nfunction updateAppTheme() { // dispatch events when theme needs updating\n    var bodyClass = window.document.body.classList;\n    if (bodyClass.contains('quarto-light')) {\n        window.dispatchEvent(LightEvent);\n    } else if (bodyClass.contains('quarto-dark')) {\n        window.dispatchEvent(DarkEvent);\n    }\n  }\n  \nvar observer = new MutationObserver(function(mutations) { // listen for theme changes\n    mutations.forEach(function(mutation) {\n      if (mutation.type === 'attributes' && mutation.attributeName === 'class') {\n        updateAppTheme();\n      }\n    });\n  });\n  \nobserver.observe(window.document.body, { // enable observer\n    attributes: true\n});\n\nwindow.onmessage = function(e) { // update theme when receives querry\n  if (e.data == 'ShinyColorQuery') {\n    updateAppTheme();\n  }\n};\n```\n\n\nBack to the ShinyLive app, it also needs to add a JS script to communicate with the parent page. The compete ShinyLive app code looks like this:\n\n```{shinylive-python}\n#| echo: true\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nfrom shiny import *\nfrom pathlib import Path\n\napp_ui = ui.page_fluid(\n    \"This is a Shinylive app with dark theme synced with Quarto\", # other ui inputs that you like\n    ui.head_content(ui.include_js(Path(__file__).parent / \"light-dark.js\")),\n)\n\napp = App(app_ui, None)\n\n## file: light-dark.js\nwindow.parent.addEventListener(\"quarto-color-mode\", function(event) {\n    document.documentElement.dataset.bsTheme = event.detail.mode;\n    if (event.detail.mode === \"dark\") {\n        document.documentElement.style.setProperty('--bs-body-bg', \"#16242f\"); // custom dark background color\n    }  else if (event.detail.mode === \"light\") {\n        document.documentElement.style.setProperty('--bs-body-bg', \"#f9fffe\"); // custom light background color\n    }\n})\nwindow.parent.postMessage('ShinyColorQuery', '*'); // request Quarto theme color when Shinyapp is loaded\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}